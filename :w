import { ethers } from "ethers";
import { useEffect, useState } from "react";
import { useGetBalance } from "../hooks/useGetBalance";
import { useGetCurrencies } from "../hooks/useGetPrices";
import { useGetWallets } from "../hooks/useGetWallets";

const BASE_URL = 'http://localhost:5002';

const Balance = ({ walletId }) => {
  const { data } = useGetBalance(walletId);
  function formatToEth(weiBalance: string | ethers.BigNumber) {
    if(!weiBalance) return '0'
    try {
      return ethers.utils.formatEther(weiBalance.toString()) 
    } catch (error) {
      console.log(error)
      return '0'
    }
  }

  return (
    <div>
      <h4>Balance</h4>
      <p>{formatToEth(data)}</p>
    </div>
  )
}

const CurrencyPrices = ({ walletId }) => {
  const { data } = useGetBalance(walletId);
  const { data: prices } = useGetCurrencies();
  const [selectedCurrency, setSelectedCurrency] = useState(null);
  function formatToEth(weiBalance: string | ethers.BigNumber) {
    if(!weiBalance) return '0'
    try {
      return ethers.utils.formatEther(weiBalance.toString())
    } catch (error) {
      console.log(error)
      return '0'
    }
  }

  const selectedPrice = () => prices?.find(price => price.id == selectedCurrency);

  useEffect(() => {
    if (data && prices) {
      setSelectedCurrency(prices[0].id);
    }
  }, [prices])

  return (
    <div>
      <div>
        <h4>Balance</h4>
        <p>{selectedPrice()?.symbol} {Number(formatToEth(data))/selectedPrice()?.price}</p>
      </div>
      <div>
        <h4>Currency</h4>
        <select onChange={e => setSelectedCurrency(e.target.value)}>
          {prices?.map((price) => (
            <option key={price.id} value={price.id}>{price.name}</option>
          ))}
        </select>
        <p>{selectedPrice()?.price}</p>
      </div>
    </div>
  )
}


export const Dashboard = () => {
  const { data, refetch } = useGetWallets();
  async function handleAddWallet(e) {
    e.preventDefault();
    const accessToken = localStorage.getItem('accessToken');
    await fetch(`${BASE_URL}/wallets`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${accessToken}`,
      },
      body: JSON.stringify({
        name: e.target.name.value,
        address: e.target.address.value,
      }),
    })
    refetch();
  }

  return (
    <div>
      <h1 
        className="text-center text-2xl font-bold"
      >Dashboard</h1>
      <form 
        className="flex flex-direction-vertical justify-center items-center gap-2"
        onSubmit={handleAddWallet}>
        <div
          className="bg-gray-100 rounded-lg p-2"
        >
          <label
            htmlFor="name" 
            className="text-center text-md font-bold"
          >Name</label>
          <input
            type="text"
            id="name" 
            className="text-center text-md font-bold"
          />
        </div>
        <div
          className="bg-gray-100 rounded-lg p-2"
        >
          <label
            htmlFor="address"
            className="text-center text-md font-bold"
          >Wallet address</label>
          <input
            type="text"
            id="address"
            className="text-center text-md font-bold"
          />
        </div>
        <button
          type="submit"
          className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
        >
          Add wallet
        </button>
      </form>
      <h2
        className="text-center text-xl font-bold"
      >Wallets</h2>
      {!data && <p className="text-center">You don't have any wallets</p>}
      {!!data &&
      <ul>
        {data.map((wallet: any) => (
          <li
            className="bg-gray-100 rounded-lg p-2 flex justify-between items-center gap-2"
            key={wallet.id}>
            <div
              className="flex justify-between items-center gap-2"
            >
              <div
                className="flex flex-direction-vertical justify-center items-center gap-2"
              >
                <div
                  className="flex flex-direction-horizontal justify-center items-center gap-2"
                >
                  <h3
                    className="text-center text-md font-bold"
                  >{wallet.name} {wallet.isOld?'Wallet is old': ''}</h3>
                  {wallet.isOld && <div className="bg-red-300 rounded-lg p-2">Wallet is old!</div>}
                </div>
                <p>{wallet.address}</p>
              </div>
              <CurrencyPrices walletId={wallet.id} />
            </div>
          </li>
        ))}
      </ul>
      }
    </div>
  )
}
